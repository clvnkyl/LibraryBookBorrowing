/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarybookborrowing;


import java.awt.Color;
import java.sql.*;
import java.awt.Font;
import java.io.File;
import java.time.LocalDate;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JTable;

/**
 *
 * @author cknoc
 */
public class Dashboard extends javax.swing.JFrame {
    
    ConnectDatabase db = new ConnectDatabase();
    Filters callFilters = new Filters();
    LocalDateTime dateTime = LocalDateTime.now();
    Methods callMethods = new Methods();
    AdminMethods callAdminMethods = new AdminMethods();
    SearchBookMethods callSearch = new SearchBookMethods();
    
    
    private static final java.util.logging.Logger logger =
            java.util.logging.Logger.getLogger(Dashboard.class.getName());

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        callMethods.getBooks(tblAvailBooks);
        callFilters.resizeColumnWidth(tblAvailBooks);
        callFilters.resizeColumnWidth(tblMemberInfo);
        callMethods.refreshDashboard(tblDashboard);
        returnMethods.loadBorrowedBook(tblBorrowed);
        returnMethods.loadReturnedBook(tblReturned);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlBase = new javax.swing.JPanel();
        pnlNavigation = new javax.swing.JPanel();
        lblHome = new javax.swing.JLabel();
        lblBorrow = new javax.swing.JLabel();
        lblReturn = new javax.swing.JLabel();
        lblCheckAcc = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        lblOptions = new javax.swing.JLabel();
        pnlScreen = new javax.swing.JPanel();
        pnlHome = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblDashboard = new javax.swing.JTable();
        pnlBorrow = new javax.swing.JPanel();
        lblBorrowList = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBorrowList = new javax.swing.JTable();
        pnlBorrowingInfo = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtBorrowerName = new javax.swing.JTextField();
        txtBookTitle = new javax.swing.JTextField();
        txtIssuedBy = new javax.swing.JTextField();
        btnDoneBorrowing = new javax.swing.JButton();
        btnAddBook = new javax.swing.JButton();
        btnDelBook = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblMemberInfo = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblStaffInfo = new javax.swing.JTable();
        pnlAvailBooks = new javax.swing.JPanel();
        lblAvailBooks = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblAvailBooks = new javax.swing.JTable();
        pnlReturn = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pnlReturningInfo = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        lblReceivedBy = new javax.swing.JLabel();
        txtReturnee = new javax.swing.JTextField();
        txtReturnBook = new javax.swing.JTextField();
        txtBorrowDate = new javax.swing.JTextField();
        btnDoneReceive = new javax.swing.JButton();
        txtDueDate = new javax.swing.JTextField();
        txtReturnDate = new javax.swing.JTextField();
        txtReceivedBy = new javax.swing.JTextField();
        txtReceivedBy1 = new javax.swing.JLabel();
        txtReceivedBy2 = new javax.swing.JLabel();
        txtReceivedBy3 = new javax.swing.JLabel();
        txtReceivedBy4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBorrowed = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblReturned = new javax.swing.JTable();
        pnlCheckAcc = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMemberHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearchInput = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnRefresh = new javax.swing.JButton();
        pnlSearchBook = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblSearchBooksList = new javax.swing.JTable();
        pnlSearchingForm = new javax.swing.JPanel();
        txtSearchBookTitle = new javax.swing.JTextField();
        btnSearchBook = new javax.swing.JButton();
        cmbChooseSearch = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSearchBookAuthor = new javax.swing.JTextField();
        txtSearchBookYearPub = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnSearchClear = new javax.swing.JButton();
        pnlOptions = new javax.swing.JPanel();
        tabbedMenu = new javax.swing.JTabbedPane();
        pnlOptionsTab = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        btnAboutUs = new javax.swing.JButton();
        pnlAdmin = new javax.swing.JPanel();
        pnlBookForm = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtAdminBookID = new javax.swing.JTextField();
        txtAdminBookTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtAdminAuthor = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtAdminYearPublished = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtAdminQty = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtAdminPublisher = new javax.swing.JTextField();
        btnAdminMinusQty = new javax.swing.JButton();
        btnAdminAddQty = new javax.swing.JButton();
        cmbAdminChooseToDo = new javax.swing.JComboBox<>();
        btnAdminUpdateBook = new javax.swing.JButton();
        btnAdminAddBook = new javax.swing.JButton();
        btnAdminDeleteBook = new javax.swing.JButton();
        btnAdminClear = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblAdminBooksList = new javax.swing.JTable();
        txtAdminSearchBookTitle = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 168, 107));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1500, 900));
        setMinimumSize(new java.awt.Dimension(1300, 600));
        setPreferredSize(new java.awt.Dimension(1320, 600));
        setSize(new java.awt.Dimension(1300, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlBase.setBackground(new java.awt.Color(165, 214, 167));
        pnlBase.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlBase.setMaximumSize(new java.awt.Dimension(1500, 900));
        pnlBase.setPreferredSize(new java.awt.Dimension(1300, 700));

        pnlNavigation.setBackground(new java.awt.Color(0, 168, 107));
        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {50};
        jPanel2Layout.rowHeights = new int[] {60};
        jPanel2Layout.columnWeights = new double[] {30.0, 30.0, 30.0, 30.0, 30.0, 5.0};
        jPanel2Layout.rowWeights = new double[] {0.0};
        pnlNavigation.setLayout(jPanel2Layout);

        lblHome.setBackground(new java.awt.Color(0, 0, 0));
        lblHome.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblHome.setForeground(new java.awt.Color(0, 0, 0));
        lblHome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHome.setText("Home");
        lblHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHomeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblHome, gridBagConstraints);

        lblBorrow.setBackground(new java.awt.Color(0, 0, 0));
        lblBorrow.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblBorrow.setForeground(new java.awt.Color(0, 0, 0));
        lblBorrow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBorrow.setText("Borrow");
        lblBorrow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBorrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBorrowMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblBorrow, gridBagConstraints);

        lblReturn.setBackground(new java.awt.Color(0, 0, 0));
        lblReturn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblReturn.setForeground(new java.awt.Color(0, 0, 0));
        lblReturn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReturn.setText("Return");
        lblReturn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblReturnMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblReturn, gridBagConstraints);

        lblCheckAcc.setBackground(new java.awt.Color(0, 0, 0));
        lblCheckAcc.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCheckAcc.setForeground(new java.awt.Color(0, 0, 0));
        lblCheckAcc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCheckAcc.setText("Check Account");
        lblCheckAcc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCheckAcc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCheckAccMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblCheckAcc, gridBagConstraints);

        lblSearch.setBackground(new java.awt.Color(0, 0, 0));
        lblSearch.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(0, 0, 0));
        lblSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSearch.setText("Search Book");
        lblSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSearchMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblSearch, gridBagConstraints);

        lblOptions.setBackground(new java.awt.Color(0, 0, 0));
        lblOptions.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblOptions.setForeground(new java.awt.Color(0, 0, 0));
        lblOptions.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/menu.png"))); // NOI18N
        lblOptions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblOptions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblOptions.setMaximumSize(new java.awt.Dimension(50, 32));
        lblOptions.setMinimumSize(new java.awt.Dimension(50, 32));
        lblOptions.setName(""); // NOI18N
        lblOptions.setPreferredSize(new java.awt.Dimension(50, 32));
        lblOptions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOptionsMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 25;
        pnlNavigation.add(lblOptions, gridBagConstraints);

        pnlScreen.setBackground(new java.awt.Color(165, 214, 167));
        pnlScreen.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlScreen.setLayout(new java.awt.CardLayout());

        pnlHome.setBackground(new java.awt.Color(165, 214, 167));
        pnlHome.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlHome.setMinimumSize(new java.awt.Dimension(900, 500));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Book Records");

        tblDashboard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Transaction ID", "Member Name", "Issuer", "Book Title", "Borrow Date", "Due Date", "Return Date", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDashboard.setMinimumSize(new java.awt.Dimension(900, 500));
        tblDashboard.setRowHeight(25);
        tblDashboard.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane11.setViewportView(tblDashboard);

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
            .addComponent(jScrollPane11)
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
        );

        pnlScreen.add(pnlHome, "card2");

        pnlBorrow.setBackground(new java.awt.Color(165, 214, 167));
        pnlBorrow.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlBorrow.setMinimumSize(new java.awt.Dimension(1300, 500));

        lblBorrowList.setBackground(new java.awt.Color(0, 0, 0));
        lblBorrowList.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblBorrowList.setForeground(new java.awt.Color(0, 0, 0));
        lblBorrowList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBorrowList.setText("Borrowing List");

        tblBorrowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Book Title", "Member Name", "Issued by", "Borrow Date", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBorrowList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblBorrowList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblBorrowList.setMinimumSize(new java.awt.Dimension(900, 500));
        tblBorrowList.setRowHeight(25);
        tblBorrowList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblBorrowList);
        if (tblBorrowList.getColumnModel().getColumnCount() > 0) {
            tblBorrowList.getColumnModel().getColumn(0).setResizable(false);
            tblBorrowList.getColumnModel().getColumn(1).setResizable(false);
            tblBorrowList.getColumnModel().getColumn(2).setResizable(false);
            tblBorrowList.getColumnModel().getColumn(3).setResizable(false);
            tblBorrowList.getColumnModel().getColumn(4).setResizable(false);
            tblBorrowList.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Member Name:");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Book Title:");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Issuer Name:");

        txtBorrowerName.setMaximumSize(new java.awt.Dimension(64, 22));
        txtBorrowerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBorrowerNameKeyReleased(evt);
            }
        });

        txtBookTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBookTitleKeyReleased(evt);
            }
        });

        txtIssuedBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIssuedByKeyReleased(evt);
            }
        });

        btnDoneBorrowing.setText("Done");
        btnDoneBorrowing.setToolTipText("");
        btnDoneBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneBorrowingActionPerformed(evt);
            }
        });

        btnAddBook.setText("Add Book");
        btnAddBook.setToolTipText("");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        btnDelBook.setText("Delete Book");
        btnDelBook.setToolTipText("");
        btnDelBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBorrowingInfoLayout = new javax.swing.GroupLayout(pnlBorrowingInfo);
        pnlBorrowingInfo.setLayout(pnlBorrowingInfoLayout);
        pnlBorrowingInfoLayout.setHorizontalGroup(
            pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBorrowingInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBorrowingInfoLayout.createSequentialGroup()
                        .addGroup(pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(225, 225, 225))
                    .addGroup(pnlBorrowingInfoLayout.createSequentialGroup()
                        .addComponent(btnAddBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDoneBorrowing)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBorrowingInfoLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(274, 274, 274))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBorrowingInfoLayout.createSequentialGroup()
                        .addGroup(pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtIssuedBy, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBookTitle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBorrowerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlBorrowingInfoLayout.setVerticalGroup(
            pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBorrowingInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBorrowerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIssuedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBorrowingInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBook)
                    .addComponent(btnDelBook)
                    .addComponent(btnDoneBorrowing))
                .addGap(24, 24, 24))
        );

        jScrollPane7.setMaximumSize(new java.awt.Dimension(500, 500));

        tblMemberInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMemberInfo.setRowHeight(25);
        tblMemberInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMemberInfoMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tblMemberInfo);
        if (tblMemberInfo.getColumnModel().getColumnCount() > 0) {
            tblMemberInfo.getColumnModel().getColumn(0).setResizable(false);
            tblMemberInfo.getColumnModel().getColumn(1).setResizable(false);
        }

        jScrollPane8.setMaximumSize(new java.awt.Dimension(500, 500));

        tblStaffInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff ID", "Staff Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStaffInfo.setRowHeight(25);
        tblStaffInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblStaffInfoMouseReleased(evt);
            }
        });
        jScrollPane8.setViewportView(tblStaffInfo);

        pnlAvailBooks.setBackground(new java.awt.Color(165, 214, 167));

        lblAvailBooks.setBackground(new java.awt.Color(0, 0, 0));
        lblAvailBooks.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblAvailBooks.setForeground(new java.awt.Color(0, 0, 0));
        lblAvailBooks.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAvailBooks.setText("Available Books");

        tblAvailBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Title", "Author", "Publisher", "Year Published"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAvailBooks.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblAvailBooks.setMinimumSize(new java.awt.Dimension(900, 500));
        tblAvailBooks.setRowHeight(25);
        tblAvailBooks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAvailBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblAvailBooksMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tblAvailBooks);

        javax.swing.GroupLayout pnlAvailBooksLayout = new javax.swing.GroupLayout(pnlAvailBooks);
        pnlAvailBooks.setLayout(pnlAvailBooksLayout);
        pnlAvailBooksLayout.setHorizontalGroup(
            pnlAvailBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAvailBooksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAvailBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane6)
        );
        pnlAvailBooksLayout.setVerticalGroup(
            pnlAvailBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAvailBooksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAvailBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlBorrowLayout = new javax.swing.GroupLayout(pnlBorrow);
        pnlBorrow.setLayout(pnlBorrowLayout);
        pnlBorrowLayout.setHorizontalGroup(
            pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnlBorrowLayout.createSequentialGroup()
                .addGroup(pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlBorrowingInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBorrowList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBorrowLayout.createSequentialGroup()
                        .addGroup(pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                            .addComponent(pnlAvailBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlBorrowLayout.setVerticalGroup(
            pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBorrowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBorrowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBorrowLayout.createSequentialGroup()
                        .addComponent(pnlBorrowingInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlBorrowLayout.createSequentialGroup()
                        .addComponent(lblBorrowList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlAvailBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pnlScreen.add(pnlBorrow, "card3");

        pnlReturn.setBackground(new java.awt.Color(165, 214, 167));
        pnlReturn.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlReturn.setMinimumSize(new java.awt.Dimension(900, 500));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Return Book");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Member Name:");

        lblReceivedBy.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblReceivedBy.setText("Received by:");

        txtReturnee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtReturneeKeyReleased(evt);
            }
        });

        txtReturnBook.setEditable(false);
        txtReturnBook.setBackground(new java.awt.Color(255, 179, 186));

        txtBorrowDate.setEditable(false);
        txtBorrowDate.setBackground(new java.awt.Color(255, 179, 186));

        btnDoneReceive.setText("Return");
        btnDoneReceive.setToolTipText("");
        btnDoneReceive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneReceiveActionPerformed(evt);
            }
        });

        txtDueDate.setEditable(false);
        txtDueDate.setBackground(new java.awt.Color(255, 179, 186));

        txtReturnDate.setEditable(false);
        txtReturnDate.setBackground(new java.awt.Color(255, 179, 186));

        txtReceivedBy1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtReceivedBy1.setText("Due Date:");

        txtReceivedBy2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtReceivedBy2.setText("Book Title:");

        txtReceivedBy3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtReceivedBy3.setText("Return Date:");

        txtReceivedBy4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txtReceivedBy4.setText("Borrow Date:");

        javax.swing.GroupLayout pnlReturningInfoLayout = new javax.swing.GroupLayout(pnlReturningInfo);
        pnlReturningInfo.setLayout(pnlReturningInfoLayout);
        pnlReturningInfoLayout.setHorizontalGroup(
            pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReturningInfoLayout.createSequentialGroup()
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlReturningInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDoneReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlReturningInfoLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtReceivedBy2)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtReturnee, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlReturningInfoLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtReturnBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReturningInfoLayout.createSequentialGroup()
                                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblReceivedBy)
                                    .addComponent(txtReceivedBy1)
                                    .addComponent(txtReceivedBy4)
                                    .addComponent(txtReceivedBy3))
                                .addGap(7, 7, 7)
                                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtReceivedBy, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtReturnDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDueDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBorrowDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))))
                .addGap(19, 19, 19))
        );
        pnlReturningInfoLayout.setVerticalGroup(
            pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReturningInfoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReturnee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReturnBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReceivedBy2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBorrowDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReceivedBy4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReceivedBy1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReceivedBy3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReturningInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReceivedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReceivedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDoneReceive)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        tblBorrowed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Member Name", "Book Title", "Borrow Date", "Due Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBorrowed.setMinimumSize(new java.awt.Dimension(900, 500));
        tblBorrowed.setRowHeight(25);
        tblBorrowed.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBorrowed.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBorrowed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBorrowedMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblBorrowed);

        tblReturned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Member Name", "Book Title", "Borrow Date", "Due Date", "Return Date", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReturned.setMinimumSize(new java.awt.Dimension(900, 500));
        tblReturned.setRowHeight(25);
        tblReturned.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane10.setViewportView(tblReturned);

        javax.swing.GroupLayout pnlReturnLayout = new javax.swing.GroupLayout(pnlReturn);
        pnlReturn.setLayout(pnlReturnLayout);
        pnlReturnLayout.setHorizontalGroup(
            pnlReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReturnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlReturnLayout.createSequentialGroup()
                        .addComponent(pnlReturningInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE))
                    .addComponent(jScrollPane10))
                .addContainerGap())
        );
        pnlReturnLayout.setVerticalGroup(
            pnlReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReturnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(12, 12, 12)
                .addGroup(pnlReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlReturningInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlScreen.add(pnlReturn, "card4");

        pnlCheckAcc.setBackground(new java.awt.Color(165, 214, 167));
        pnlCheckAcc.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlCheckAcc.setMinimumSize(new java.awt.Dimension(900, 500));

        btnSearch.setText("Search");
        btnSearch.setToolTipText("");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblMemberHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction ID", "Reference ID", "Member Name", "Book Title", "Borrow Date", "Due Date", "Return Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMemberHistory.setMinimumSize(new java.awt.Dimension(900, 500));
        tblMemberHistory.setRowHeight(25);
        tblMemberHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tblMemberHistory);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Member Borrowing History");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Search By:");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Member Name:", "Member ID:" }));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCheckAccLayout = new javax.swing.GroupLayout(pnlCheckAcc);
        pnlCheckAcc.setLayout(pnlCheckAccLayout);
        pnlCheckAccLayout.setHorizontalGroup(
            pnlCheckAccLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckAccLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckAccLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(pnlCheckAccLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefresh)
                        .addGap(0, 566, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCheckAccLayout.setVerticalGroup(
            pnlCheckAccLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckAccLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckAccLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlScreen.add(pnlCheckAcc, "card5");

        pnlSearchBook.setBackground(new java.awt.Color(165, 214, 167));
        pnlSearchBook.setMaximumSize(new java.awt.Dimension(1300, 900));
        pnlSearchBook.setMinimumSize(new java.awt.Dimension(900, 500));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Search a Book");

        tblSearchBooksList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Publisher", "Year Publish", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchBooksList.setMaximumSize(new java.awt.Dimension(2147483647, 1000));
        tblSearchBooksList.setMinimumSize(new java.awt.Dimension(900, 500));
        tblSearchBooksList.setRowHeight(25);
        jScrollPane5.setViewportView(tblSearchBooksList);

        pnlSearchingForm.setBackground(new java.awt.Color(165, 214, 167));

        txtSearchBookTitle.setEditable(false);
        txtSearchBookTitle.setBackground(new java.awt.Color(255, 179, 186));
        txtSearchBookTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnSearchBook.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSearchBook.setForeground(new java.awt.Color(0, 0, 0));
        btnSearchBook.setText("Search");
        btnSearchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBookActionPerformed(evt);
            }
        });

        cmbChooseSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbChooseSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose search", "Title", "Author", "Year" }));
        cmbChooseSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbChooseSearchActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Title");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Author");

        txtSearchBookAuthor.setEditable(false);
        txtSearchBookAuthor.setBackground(new java.awt.Color(255, 179, 186));
        txtSearchBookAuthor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtSearchBookYearPub.setEditable(false);
        txtSearchBookYearPub.setBackground(new java.awt.Color(255, 179, 186));
        txtSearchBookYearPub.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Year Published");

        btnSearchClear.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSearchClear.setForeground(new java.awt.Color(0, 0, 0));
        btnSearchClear.setText("Clear");
        btnSearchClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchingFormLayout = new javax.swing.GroupLayout(pnlSearchingForm);
        pnlSearchingForm.setLayout(pnlSearchingFormLayout);
        pnlSearchingFormLayout.setHorizontalGroup(
            pnlSearchingFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchingFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchingFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchBookYearPub, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addGroup(pnlSearchingFormLayout.createSequentialGroup()
                        .addGroup(pnlSearchingFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbChooseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtSearchBookAuthor)
                    .addComponent(txtSearchBookTitle)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchingFormLayout.createSequentialGroup()
                        .addComponent(btnSearchClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchBook)))
                .addGap(16, 16, 16))
        );
        pnlSearchingFormLayout.setVerticalGroup(
            pnlSearchingFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchingFormLayout.createSequentialGroup()
                .addComponent(cmbChooseSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchBookYearPub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlSearchingFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchBook)
                    .addComponent(btnSearchClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlSearchBookLayout = new javax.swing.GroupLayout(pnlSearchBook);
        pnlSearchBook.setLayout(pnlSearchBookLayout);
        pnlSearchBookLayout.setHorizontalGroup(
            pnlSearchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchBookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSearchingForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSearchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSearchBookLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane5))
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlSearchBookLayout.setVerticalGroup(
            pnlSearchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchBookLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSearchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addGroup(pnlSearchBookLayout.createSequentialGroup()
                        .addComponent(pnlSearchingForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlScreen.add(pnlSearchBook, "card6");

        pnlOptions.setBackground(new java.awt.Color(165, 214, 167));

        tabbedMenu.setBackground(new java.awt.Color(165, 214, 167));
        tabbedMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabbedMenu.setForeground(new java.awt.Color(0, 0, 0));
        tabbedMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabbedMenuMouseReleased(evt);
            }
        });

        pnlOptionsTab.setBackground(new java.awt.Color(165, 214, 167));

        btnLogout.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(0, 0, 0));
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnAboutUs.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnAboutUs.setForeground(new java.awt.Color(0, 0, 0));
        btnAboutUs.setText("About us");
        btnAboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutUsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOptionsTabLayout = new javax.swing.GroupLayout(pnlOptionsTab);
        pnlOptionsTab.setLayout(pnlOptionsTabLayout);
        pnlOptionsTabLayout.setHorizontalGroup(
            pnlOptionsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOptionsTabLayout.createSequentialGroup()
                .addContainerGap(756, Short.MAX_VALUE)
                .addComponent(btnAboutUs, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlOptionsTabLayout.setVerticalGroup(
            pnlOptionsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOptionsTabLayout.createSequentialGroup()
                .addContainerGap(436, Short.MAX_VALUE)
                .addGroup(pnlOptionsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnAboutUs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedMenu.addTab("Options", pnlOptionsTab);

        pnlAdmin.setBackground(new java.awt.Color(165, 214, 167));
        pnlAdmin.setEnabled(false);
        pnlAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlAdminMouseReleased(evt);
            }
        });

        pnlBookForm.setBackground(new java.awt.Color(165, 214, 167));
        pnlBookForm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Book ID");

        txtAdminBookID.setEditable(false);
        txtAdminBookID.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminBookID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminBookID.setForeground(new java.awt.Color(0, 0, 0));

        txtAdminBookTitle.setEditable(false);
        txtAdminBookTitle.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminBookTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminBookTitle.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Book Title");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Author");

        txtAdminAuthor.setEditable(false);
        txtAdminAuthor.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminAuthor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminAuthor.setForeground(new java.awt.Color(0, 0, 0));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("Year published");

        txtAdminYearPublished.setEditable(false);
        txtAdminYearPublished.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminYearPublished.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminYearPublished.setForeground(new java.awt.Color(0, 0, 0));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Quantity");

        txtAdminQty.setEditable(false);
        txtAdminQty.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminQty.setForeground(new java.awt.Color(0, 0, 0));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Publisher");

        txtAdminPublisher.setEditable(false);
        txtAdminPublisher.setBackground(new java.awt.Color(255, 179, 186));
        txtAdminPublisher.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminPublisher.setForeground(new java.awt.Color(0, 0, 0));

        btnAdminMinusQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdminMinusQty.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminMinusQty.setText("-");
        btnAdminMinusQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeQty(evt);
            }
        });

        btnAdminAddQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdminAddQty.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminAddQty.setText("+");
        btnAdminAddQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeQty(evt);
            }
        });

        cmbAdminChooseToDo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbAdminChooseToDo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Update Book Info", "Add new book", "Delete book" }));
        cmbAdminChooseToDo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAdminChooseToDoActionPerformed(evt);
            }
        });

        btnAdminUpdateBook.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdminUpdateBook.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminUpdateBook.setText("Update");
        btnAdminUpdateBook.setEnabled(false);
        btnAdminUpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminUpdateBookActionPerformed(evt);
            }
        });

        btnAdminAddBook.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdminAddBook.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminAddBook.setText("Add New");
        btnAdminAddBook.setEnabled(false);
        btnAdminAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminAddBookActionPerformed(evt);
            }
        });

        btnAdminDeleteBook.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdminDeleteBook.setForeground(new java.awt.Color(255, 255, 255));
        btnAdminDeleteBook.setText("Delete Book");
        btnAdminDeleteBook.setEnabled(false);
        btnAdminDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminDeleteBookActionPerformed(evt);
            }
        });

        btnAdminClear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdminClear.setText("Clear");
        btnAdminClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBookFormLayout = new javax.swing.GroupLayout(pnlBookForm);
        pnlBookForm.setLayout(pnlBookFormLayout);
        pnlBookFormLayout.setHorizontalGroup(
            pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookFormLayout.createSequentialGroup()
                        .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlBookFormLayout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(34, 34, 34))
                                .addGroup(pnlBookFormLayout.createSequentialGroup()
                                    .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(pnlBookFormLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)))
                        .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAdminBookID)
                            .addComponent(txtAdminBookTitle)
                            .addComponent(txtAdminAuthor)
                            .addComponent(txtAdminYearPublished)
                            .addComponent(txtAdminPublisher)
                            .addGroup(pnlBookFormLayout.createSequentialGroup()
                                .addComponent(btnAdminMinusQty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAdminQty, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdminAddQty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                                .addComponent(btnAdminClear, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBookFormLayout.createSequentialGroup()
                        .addComponent(cmbAdminChooseToDo, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnAdminUpdateBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdminAddBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdminDeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlBookFormLayout.setVerticalGroup(
            pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbAdminChooseToDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdminBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdminBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdminAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdminPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdminYearPublished, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdminMinusQty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdminAddQty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAdminQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdminClear))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdminUpdateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdminAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdminDeleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(258, 258, 258))
        );

        tblAdminBooksList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Publisher", "Year published", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAdminBooksList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAdminBooksList.getTableHeader().setReorderingAllowed(false);
        tblAdminBooksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblAdminBooksListMouseReleased(evt);
            }
        });
        jScrollPane9.setViewportView(tblAdminBooksList);

        txtAdminSearchBookTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAdminSearchBookTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAdminSearchBookTitleKeyReleased(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Search Book Title");

        javax.swing.GroupLayout pnlAdminLayout = new javax.swing.GroupLayout(pnlAdmin);
        pnlAdmin.setLayout(pnlAdminLayout);
        pnlAdminLayout.setHorizontalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBookForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAdminSearchBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlAdminLayout.setVerticalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlBookForm, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAdminLayout.createSequentialGroup()
                        .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAdminSearchBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedMenu.addTab("Admin", pnlAdmin);

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOptionsLayout.createSequentialGroup()
                .addComponent(tabbedMenu)
                .addContainerGap())
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedMenu)
                .addContainerGap())
        );

        pnlScreen.add(pnlOptions, "card7");

        javax.swing.GroupLayout pnlBaseLayout = new javax.swing.GroupLayout(pnlBase);
        pnlBase.setLayout(pnlBaseLayout);
        pnlBaseLayout.setHorizontalGroup(
            pnlBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBaseLayout.setVerticalGroup(
            pnlBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBaseLayout.createSequentialGroup()
                .addComponent(pnlNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBase, javax.swing.GroupLayout.DEFAULT_SIZE, 1312, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBase, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHomeMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlHome);
        pnlScreen.repaint();
        pnlScreen.revalidate();
        callMethods.refreshDashboard(tblDashboard);
    }//GEN-LAST:event_lblHomeMouseClicked

    private void lblBorrowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBorrowMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlBorrow);
        pnlScreen.repaint();
        pnlScreen.revalidate();
    }//GEN-LAST:event_lblBorrowMouseClicked

    private void lblReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblReturnMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlReturn);
        pnlScreen.repaint();
        pnlScreen.revalidate();
        returnMethods.loadBorrowedBook(tblBorrowed);
    }//GEN-LAST:event_lblReturnMouseClicked

    private void lblCheckAccMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCheckAccMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlCheckAcc);
        pnlScreen.repaint();
        pnlScreen.revalidate();
        loadAllMemberHistory();
    }//GEN-LAST:event_lblCheckAccMouseClicked

    private void lblSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSearchMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlSearchBook);
        pnlScreen.repaint();
        pnlScreen.revalidate();
        callMethods.getBooks(tblSearchBooksList);
    }//GEN-LAST:event_lblSearchMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       searchMemberHistory();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDoneReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneReceiveActionPerformed
        ConnectDatabase db = new ConnectDatabase();
        Connection conn = null;
        try {
            conn = db.createConnection();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database: " + ex.getMessage());
            ex.printStackTrace();
            return;
        }
        
        int selectedRow = tblBorrowed.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a book to return.");
                return;
            }
            
            int transId = Integer.parseInt(tblBorrowed.getValueAt(selectedRow, 0).toString());
        
            
            String staffReceiver = txtReceivedBy.getText().trim();
            if(staffReceiver.isEmpty()){
                JOptionPane.showMessageDialog(this, "Please enter staff ID");
                return;
            }
            int receiverStaffId;
            try {
                receiverStaffId = Integer.parseInt(staffReceiver);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Staff ID");
                return;
            }
            
            LocalDateTime returnDate = LocalDateTime.now();  
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM:dd:yyyy HH:mm");
            String formattedReturn = returnDate.format(formatter);
            
            try {
                String checkSql = "SELECT COUNT(*) FROM tbl_staff WHERE fld_staff_id = ?";
                PreparedStatement checkPs = conn.prepareStatement(checkSql);
                checkPs.setInt(1, receiverStaffId);
                ResultSet rs = checkPs.executeQuery();
                
                if (rs.next() && rs.getInt(1) == 0) {
                    txtReturnee.setText("");
                    txtReturnBook.setText("");
                    txtReceivedBy.setText("");
                    txtBorrowDate.setText(""); 
                    txtDueDate.setText(""); 
                    txtReturnDate.setText("");
                    txtReceivedBy.setText("");
                    JOptionPane.showMessageDialog(this, "Staff Id not Found!");
                    rs.close();
                    checkPs.close();
                    return;
                }
                    
                rs.close();
                checkPs.close();
                
                String updateSql = "UPDATE tbl_transaction t "
                                 + "JOIN tbl_book b ON t.fld_book_id = b.fld_book_id "
                                 + "JOIN tbl_member m ON t.fld_member_id = m.fld_member_id "
                                 + "SET t.fld_status = 'Returned', "
                                 + "t.fld_return_date = NOW(), "
                                 + "t.fld_reveiver_staff_id = ? "
                                 + "WHERE t.fld_transaction_id = ?";
                PreparedStatement ps = conn.prepareStatement(updateSql);
                ps.setInt(1, receiverStaffId);
                ps.setInt(2, transId);
                int rows = ps.executeUpdate();

                if (rows > 0) {
                    // --- Get the book ID of the returned book ---
                    String getBookIdSql = "SELECT fld_book_id FROM tbl_transaction WHERE fld_transaction_id = ?";
                    PreparedStatement psBook = conn.prepareStatement(getBookIdSql);
                    psBook.setInt(1, transId);
                    ResultSet rsBook = psBook.executeQuery();

                    int bookId = -1;
                    if (rsBook.next()) {
                        bookId = rsBook.getInt("fld_book_id");
                    }
                    rsBook.close();
                    psBook.close();

                    // --- Update book quantity (add 1 back) ---
                    if (bookId != -1) {
                        String updateQtySql = "UPDATE tbl_book SET fld_quantity = fld_quantity + 1 WHERE fld_book_id = ?";
                        PreparedStatement psQty = conn.prepareStatement(updateQtySql);
                        psQty.setInt(1, bookId);
                        psQty.executeUpdate();
                        psQty.close();
                    }

                    // --- Clear fields and refresh tables ---
                    txtReturnee.setText("");
                    txtReturnBook.setText("");
                    txtReceivedBy.setText("");
                    txtBorrowDate.setText(""); 
                    txtDueDate.setText(""); 
                    txtReturnDate.setText("");
                    txtReceivedBy.setText("");

                    returnMethods.loadBorrowedBook(tblBorrowed);
                    returnMethods.loadReturnedBook(tblReturned);

                    JOptionPane.showMessageDialog(this, "Book successfully returned!");
                } else {
                    JOptionPane.showMessageDialog(this, "No matching record found!");
                }


            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error updating return: " + e.getMessage());
                e.printStackTrace();
            }

    }//GEN-LAST:event_btnDoneReceiveActionPerformed

    private void tblAvailBooksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAvailBooksMouseReleased
        callMethods.getBookID(tblAvailBooks, txtBookTitle);
    }//GEN-LAST:event_tblAvailBooksMouseReleased

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        if (!txtBookTitle.getText().isEmpty() ) {
            String borrowerName = txtBookTitle.getText();
            String issuerName = txtIssuedBy.getText();
            if (!borrowerName.isEmpty() && !issuerName.isEmpty()) {
                borrowAddBook();
                tblAvailBooks.clearSelection();
            }
            callFilters.resizeColumnWidth(tblBorrowList);
        }
        else{
            JOptionPane.showMessageDialog(this, "Choose a book to borrow");
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnDoneBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneBorrowingActionPerformed

        String messageResult = "";
        int memberID = callMethods.getFirstCell(tblMemberInfo);
        int staffID = callMethods.getFirstCell(tblStaffInfo);

        DefaultTableModel doneBorrow = (DefaultTableModel) tblBorrowList.getModel();
        DefaultTableModel memberInfo = (DefaultTableModel) tblMemberInfo.getModel();
        DefaultTableModel staffInfo = (DefaultTableModel) tblStaffInfo.getModel();

        String sqlInsert = "INSERT INTO tbl_transaction " +
                    "(fld_reference_id, fld_member_id, fld_issuer_staff_id, fld_book_id, " +
                    "fld_borrow_date, fld_due_date, fld_status) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?)";

        String sqlUpdateQty = "UPDATE tbl_book SET fld_quantity = fld_quantity - 1 WHERE fld_book_id = ?";
        
        try {
            Connection conn = db.createConnection();
            conn.setAutoCommit(false); 
            PreparedStatement pstmtInsert = conn.prepareStatement(sqlInsert);
            PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdateQty);

            String referenceId = callMethods.generateReference(5);

            if (doneBorrow.getRowCount() < 1) {
                conn.rollback();
                pstmtInsert.close();
                pstmtUpdate.close();
                conn.close();
                return;
            }
            
            if (!callMethods.memberHavePending(memberID)) {
                JOptionPane.showMessageDialog(this, 
                    "This member still has unreturned books. They cannot borrow until all are returned.");
                return;
            } 


            if (!callFilters.canBorrowBooks(doneBorrow)) {
                conn.rollback();
                pstmtInsert.close();
                pstmtUpdate.close();
                conn.close();
                return;
            }

            for (int row = 0; row < doneBorrow.getRowCount(); row++) {
                int bookId = Integer.parseInt(doneBorrow.getValueAt(row, 0).toString());

                pstmtInsert.setString(1, referenceId);
                pstmtInsert.setInt(2, memberID);
                pstmtInsert.setInt(3, staffID);
                pstmtInsert.setInt(4, bookId);

                String borrowDateStr = doneBorrow.getValueAt(row, 3).toString();
                LocalDateTime borrowLocalDate = callFilters.convertStringToLocalDate(borrowDateStr);
                pstmtInsert.setTimestamp(5, java.sql.Timestamp.valueOf(borrowLocalDate));

                String dueDateStr = doneBorrow.getValueAt(row, 4).toString();
                LocalDateTime dueLocalDate = callFilters.convertStringToLocalDate(dueDateStr);
                pstmtInsert.setTimestamp(6, java.sql.Timestamp.valueOf(dueLocalDate));
                
                

                pstmtInsert.setString(7, "Borrowed");
                pstmtInsert.executeUpdate();

                pstmtUpdate.setInt(1, bookId);
                pstmtUpdate.executeUpdate();
            }

            conn.commit();
            messageResult = "Borrowing books success";
            JOptionPane.showMessageDialog(this, messageResult);

            pstmtInsert.close();
            pstmtUpdate.close();
            conn.close();
            
            txtBorrowerName.setText("");
            txtBookTitle.setText("");
            txtIssuedBy.setText("");
            tblAvailBooks.clearSelection();
            tblMemberInfo.clearSelection();
            tblStaffInfo.clearSelection();
            doneBorrow.setRowCount(0);
            memberInfo.setRowCount(0);
            staffInfo.setRowCount(0);

        } catch (Exception e) {
            e.printStackTrace();
            try {
                Connection conn = db.createConnection();
                if (conn != null) conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Error: " + e.toString());
        }
    }//GEN-LAST:event_btnDoneBorrowingActionPerformed

    private void txtBorrowerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBorrowerNameKeyReleased
        String txtin = txtBorrowerName.getText();
        callMethods.searchMemberName(tblMemberInfo, txtin);
    }//GEN-LAST:event_txtBorrowerNameKeyReleased

    private void tblMemberInfoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMemberInfoMouseReleased

        callMethods.getID(tblMemberInfo, txtBorrowerName);
    }//GEN-LAST:event_tblMemberInfoMouseReleased

    private void btnDelBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelBookActionPerformed
        int selectedRow = tblBorrowList.getSelectedRow(); 

        if (selectedRow != -1) { 
            DefaultTableModel dtm = (DefaultTableModel) tblBorrowList.getModel();
            dtm.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }//GEN-LAST:event_btnDelBookActionPerformed

    
    private void txtIssuedByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIssuedByKeyReleased
        String txtin = txtIssuedBy.getText();
        callMethods.searchStaffName(tblStaffInfo, txtin);
    }//GEN-LAST:event_txtIssuedByKeyReleased

    private void tblStaffInfoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStaffInfoMouseReleased
        callMethods.getID(tblStaffInfo, txtIssuedBy);
    }//GEN-LAST:event_tblStaffInfoMouseReleased

    private void txtBookTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookTitleKeyReleased
        String txtin = txtBookTitle.getText();
        callMethods.searchBookTitle(tblAvailBooks, txtin);
    }//GEN-LAST:event_txtBookTitleKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setExtendedState(this.MAXIMIZED_BOTH);
    }//GEN-LAST:event_formWindowOpened

    private void lblOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOptionsMouseClicked
        pnlScreen.removeAll();
        pnlScreen.add(pnlOptions);
        pnlScreen.repaint();
        pnlScreen.revalidate();
    }//GEN-LAST:event_lblOptionsMouseClicked

    private void pnlAdminMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAdminMouseReleased
        callAdminMethods.loadBooks(tblAdminBooksList);
    }//GEN-LAST:event_pnlAdminMouseReleased

    private void tabbedMenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedMenuMouseReleased
        int tabIndex = tabbedMenu.indexAtLocation(evt.getX(), evt.getY());
        if (tabIndex == 1) {
            callAdminMethods.loadBooks(tblAdminBooksList);
        }else{
            
        }
    }//GEN-LAST:event_tabbedMenuMouseReleased

    private void changeQty(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeQty
        String operator = evt.getActionCommand();
        String value = txtAdminQty.getText().trim();

        if (value.isEmpty()) {
            return;
        }

        int qtyVal;
            qtyVal = Integer.parseInt(value);
        

        if (operator.equals("+")) {
            qtyVal++;
        } else if (operator.equals("-") && qtyVal > 0) {
            qtyVal--;
        }

        txtAdminQty.setText(String.valueOf(qtyVal));
    }//GEN-LAST:event_changeQty

    private void txtAdminSearchBookTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdminSearchBookTitleKeyReleased
        String bookTitle = txtAdminSearchBookTitle.getText();
        callAdminMethods.searchUpdateBook(tblAdminBooksList, bookTitle);
    }//GEN-LAST:event_txtAdminSearchBookTitleKeyReleased

    private void btnAdminClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminClearActionPerformed
        callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                txtAdminQty);
        
        cmbAdminChooseToDo.setSelectedIndex(0);
    }//GEN-LAST:event_btnAdminClearActionPerformed

    private void btnAdminUpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminUpdateBookActionPerformed
        callAdminMethods.updateBook(txtAdminBookID, txtAdminBookTitle, txtAdminAuthor,
                txtAdminPublisher, txtAdminYearPublished, txtAdminQty);
        
        callAdminMethods.loadBooks(tblAdminBooksList);
        
        cmbAdminChooseToDo.setSelectedIndex(0);
        callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                txtAdminQty);
        txtAdminSearchBookTitle.setText("");
        
    }//GEN-LAST:event_btnAdminUpdateBookActionPerformed

    private void btnAdminAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminAddBookActionPerformed
        
        if (!txtAdminBookTitle.getText().trim().isEmpty()) {
            callAdminMethods.insertBook(txtAdminBookTitle, txtAdminAuthor,
                txtAdminPublisher, txtAdminYearPublished, txtAdminQty);
        
            callAdminMethods.loadBooks(tblAdminBooksList);

            cmbAdminChooseToDo.setSelectedIndex(0);
            callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                    txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                    txtAdminQty);
            txtAdminSearchBookTitle.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "You did not enter book information");
        }
    }//GEN-LAST:event_btnAdminAddBookActionPerformed

    private void btnAdminDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminDeleteBookActionPerformed
            // First confirmation: ask if the user really wants to delete
        int firstConfirm = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete this book?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (firstConfirm == JOptionPane.YES_OPTION) {
            // Second confirmation: final warning
            int secondConfirm = JOptionPane.showConfirmDialog(
                    null,
                    "This action cannot be undone. Do you really want to proceed?",
                    "Final Confirmation",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (secondConfirm == JOptionPane.YES_OPTION) {
                // Proceed with delete
                callAdminMethods.deleteBook(txtAdminBookID);

                // Refresh and reset UI
                callAdminMethods.loadBooks(tblAdminBooksList);
                cmbAdminChooseToDo.setSelectedIndex(0);
                callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                        txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                        txtAdminQty);
                txtAdminSearchBookTitle.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Deletion cancelled.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Deletion cancelled.");
        }
    }//GEN-LAST:event_btnAdminDeleteBookActionPerformed

    private void cmbAdminChooseToDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAdminChooseToDoActionPerformed
        int toDo = cmbAdminChooseToDo.getSelectedIndex();
        callAdminMethods.cmboxToDo(tblBorrowList,
                cmbAdminChooseToDo, txtAdminBookID, txtAdminBookTitle, txtAdminAuthor,
                txtAdminPublisher, txtAdminYearPublished, txtAdminQty,
                btnAdminAddQty, btnAdminMinusQty, btnAdminUpdateBook, btnAdminAddBook,
                btnAdminDeleteBook);
        
        callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                txtAdminQty);
        if (toDo == 2) {
            txtAdminQty.setText("1");
        }
    }//GEN-LAST:event_cmbAdminChooseToDoActionPerformed

    private void tblAdminBooksListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAdminBooksListMouseReleased
        int toDo = cmbAdminChooseToDo.getSelectedIndex();
        int selectedRow = tblAdminBooksList.getSelectedRow();

        if (toDo == 1 || toDo == 3) {
            callAdminMethods.cmboxToDo(tblBorrowList,
                cmbAdminChooseToDo, txtAdminBookID, txtAdminBookTitle, txtAdminAuthor,
                txtAdminPublisher, txtAdminYearPublished, txtAdminQty,
                btnAdminAddQty, btnAdminMinusQty, btnAdminUpdateBook, btnAdminAddBook,
                btnAdminDeleteBook);
            callAdminMethods.getBookInfo(tblAdminBooksList, txtAdminBookID,
                    txtAdminBookTitle, txtAdminAuthor, txtAdminPublisher,
                    txtAdminYearPublished, txtAdminQty);

            
            if (!txtAdminBookTitle.getText().trim().isEmpty()) {
                btnAdminAddQty.setEnabled(true);
                btnAdminMinusQty.setEnabled(true);
            } else {
                btnAdminAddQty.setEnabled(false);
                btnAdminMinusQty.setEnabled(false);
            }

        } else {
            callAdminMethods.clearTxt(tblAdminBooksList, txtAdminBookID, txtAdminBookTitle,
                txtAdminAuthor, txtAdminPublisher, txtAdminYearPublished,
                txtAdminQty);

            // Disable quantity buttons if not in update/delete mode
            btnAdminAddQty.setEnabled(false);
            btnAdminMinusQty.setEnabled(false);
        }  
        if (toDo == 1) {
            txtAdminQty.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_tblAdminBooksListMouseReleased

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadAllMemberHistory();
        if (!txtBookTitle.getText().isEmpty() ) {
            String borrowerName = txtBookTitle.getText();
            String issuerName = txtIssuedBy.getText();
            if (!borrowerName.isEmpty() && !issuerName.isEmpty()) {
                borrowAddBook();
            }
            callFilters.resizeColumnWidth(tblBorrowList);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tblBorrowedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBorrowedMouseReleased
        int selectedRow = tblBorrowed.getSelectedRow();
            
            try {
                String memberName = tblBorrowed.getValueAt(selectedRow, 1).toString();
                String bookTitle = tblBorrowed.getValueAt(selectedRow, 2).toString();
                String formattedBorrow = tblBorrowed.getValueAt(selectedRow, 3).toString();
                String formattedDue= tblBorrowed.getValueAt(selectedRow, 4).toString();
                
                txtReturnee.setText(memberName);
                txtReturnBook.setText(bookTitle); 
                txtBorrowDate.setText(formattedBorrow); 
                txtDueDate.setText(formattedDue); 
                
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM-dd-yyyy   HH:mm");
                LocalDateTime returnDate = LocalDateTime.now();
                
                String formattedReturn = returnDate.format(formatter);
                txtReturnDate.setText(formattedReturn);

            } catch (Exception e) {
                e.printStackTrace();
            }       
    }//GEN-LAST:event_tblBorrowedMouseReleased

    private void cmbChooseSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbChooseSearchActionPerformed
        int cmbIndex = cmbChooseSearch.getSelectedIndex();
        callSearch.clearSearchTxt(txtSearchBookTitle, txtSearchBookAuthor, txtSearchBookYearPub);
        switch (cmbIndex) {
            case 0:
                txtSearchBookTitle.setEditable(false);
                txtSearchBookAuthor.setEditable(false);
                txtSearchBookYearPub.setEditable(false);
                txtSearchBookTitle.setBackground(new Color(255, 179, 186));
                txtSearchBookAuthor.setBackground(new Color(255, 179, 186));
                txtSearchBookYearPub.setBackground(new Color(255, 179, 186));
                break;
            case 1:
                txtSearchBookTitle.setEditable(true);
                txtSearchBookAuthor.setEditable(false);
                txtSearchBookYearPub.setEditable(false);
                txtSearchBookTitle.setBackground(Color.WHITE);
                txtSearchBookYearPub.setBackground(new Color(255, 179, 186));
                txtSearchBookYearPub.setBackground(new Color(255, 179, 186));
                break;
            case 2:
                txtSearchBookTitle.setEditable(false);
                txtSearchBookAuthor.setEditable(true);
                txtSearchBookYearPub.setEditable(false);
                txtSearchBookTitle.setBackground(new Color(255, 179, 186));
                txtSearchBookAuthor.setBackground(Color.WHITE);
                txtSearchBookYearPub.setBackground(new Color(255, 179, 186));
                break;
            case 3:
                txtSearchBookTitle.setEditable(false);
                txtSearchBookAuthor.setEditable(false);
                txtSearchBookYearPub.setEditable(true);
                txtSearchBookTitle.setBackground(new Color(255, 179, 186));
                txtSearchBookAuthor.setBackground(new Color(255, 179, 186));
                txtSearchBookYearPub.setBackground(Color.WHITE);
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_cmbChooseSearchActionPerformed

    private void btnSearchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBookActionPerformed
        
        // Calls the method that choose what field to search on Title, Author, or year Published
        int cmbIndex = cmbChooseSearch.getSelectedIndex();
        switch (cmbIndex) {
            case 0:
                JOptionPane.showMessageDialog(this, "Select what you want to search");
                break;
            case 1:
                callSearch.searchBookTitle(tblSearchBooksList, txtSearchBookTitle);
                break;
            case 2:
                callSearch.searchBookAuthor(tblSearchBooksList, txtSearchBookAuthor);
                break;
            case 3:
                callSearch.searchBookYear(tblSearchBooksList, txtSearchBookYearPub);
                break;
            default:
                throw new AssertionError();
        }
        //////
        
        // Calls the method that clears all texfield after search
        callSearch.clearSearchTxt(txtSearchBookTitle, txtSearchBookAuthor, txtSearchBookYearPub);
    }//GEN-LAST:event_btnSearchBookActionPerformed

    private void btnSearchClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchClearActionPerformed
         //Clears all text on textfield and sets the combox index to default value
        callSearch.clearSearchTxt(txtSearchBookTitle, txtSearchBookAuthor, txtSearchBookYearPub);
        cmbChooseSearch.setSelectedIndex(0);
        callMethods.getBooks(tblSearchBooksList);
    }//GEN-LAST:event_btnSearchClearActionPerformed

    private void btnAboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutUsActionPerformed
        callAdminMethods.aboutUs();
    }//GEN-LAST:event_btnAboutUsActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        JOptionPane.showMessageDialog(this, "Logout Successfully");
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void txtReturneeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReturneeKeyReleased
        returnMethods callReturnMethods = new returnMethods();
        
        callReturnMethods.searchName(tblBorrowed, txtReturnee);
    }//GEN-LAST:event_txtReturneeKeyReleased

    ////// FOLLOWING ARE CUSTOM METHODS
    
    public void borrowAddBook(){
        
        DefaultTableModel borrowList = (DefaultTableModel) tblBorrowList.getModel();
        int selectedRow = tblAvailBooks.getSelectedRow();
        Object selectedBook = tblAvailBooks.getValueAt(selectedRow, 0);
        
        String memberName = txtBorrowerName.getText();
        String issuerName = txtIssuedBy.getText();
        String bookTitle = txtBookTitle.getText();
        String dateBorrow = callFilters.convertLocalDateTimeToPattern(dateTime);
        String dueDate = callFilters.convertLocalDateTimeToPattern(dateTime.plusDays(5));
        borrowList.addRow(new Object[]{selectedBook , bookTitle, memberName, issuerName, dateBorrow, dueDate });
        txtBookTitle.setText("");
    }
    
    
    private void loadAllMemberHistory() {
        String sql = "SELECT t.fld_transaction_id AS TransactionID, " +
                 "t.fld_reference_id AS ReferenceID, " +
                 "CONCAT(m.fld_first_name, ' ', m.fld_last_name) AS MemberName, " +
                 "b.fld_title AS BookTitle, t.fld_borrow_date AS BorrowDate, " +
                 "t.fld_due_date AS DueDate, t.fld_return_date AS ReturnDate, " +
                 "t.fld_status AS Status " +
                 "FROM tbl_transaction t " +
                 "JOIN tbl_member m ON t.fld_member_id = m.fld_member_id " +
                 "JOIN tbl_book b ON t.fld_book_id = b.fld_book_id";

    try (Connection conn = db.createConnection();
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {

        DefaultTableModel model = (DefaultTableModel) tblMemberHistory.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            Object returnDate = rs.getTimestamp("ReturnDate");
            if (returnDate == null) returnDate = "Not Returned";

            model.addRow(new Object[]{
                rs.getInt("TransactionID"),
                rs.getString("ReferenceID"),
                rs.getString("MemberName"),
                rs.getString("BookTitle"),
                rs.getString("BorrowDate"),
                rs.getString("DueDate"),
                returnDate,
                rs.getString("Status")
            });
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        e.printStackTrace();
    }
}

    
    private void searchMemberHistory() {
    String searchInput = txtSearchInput.getText().trim();
    if (searchInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a search value.");
        return;
    }

    String searchType = (String) cmbSearchType.getSelectedItem();
    String sql = "";

    if ("Member Name:".equals(searchType)) {
        sql = "SELECT t.fld_transaction_id AS TransactionID, " +
              "t.fld_reference_id AS ReferenceID, " +
              "CONCAT(m.fld_first_name, ' ', m.fld_last_name) AS MemberName, " +
              "b.fld_title AS BookTitle, t.fld_borrow_date AS BorrowDate, " +
              "t.fld_due_date AS DueDate, t.fld_return_date AS ReturnDate, t.fld_status AS Status " +
              "FROM tbl_transaction t " +
              "JOIN tbl_member m ON t.fld_member_id = m.fld_member_id " +
              "JOIN tbl_book b ON t.fld_book_id = b.fld_book_id " +
              "WHERE CONCAT(m.fld_first_name, ' ', m.fld_last_name) LIKE ?";
    } else if ("Member ID:".equals(searchType)) {
        sql = "SELECT t.fld_transaction_id AS TransactionID, " +
              "t.fld_reference_id AS ReferenceID, " +  
              "CONCAT(m.fld_first_name, ' ', m.fld_last_name) AS MemberName, " +
              "b.fld_title AS BookTitle, t.fld_borrow_date AS BorrowDate, " +
              "t.fld_due_date AS DueDate, t.fld_return_date AS ReturnDate, t.fld_status AS Status " +
              "FROM tbl_transaction t " +
              "JOIN tbl_member m ON t.fld_member_id = m.fld_member_id " +
              "JOIN tbl_book b ON t.fld_book_id = b.fld_book_id " +
              "WHERE m.fld_member_id = ?";
        
    } else {
        JOptionPane.showMessageDialog(this, "Please select a valid search type.");
        return;
    }

    try (Connection conn = db.createConnection();
         PreparedStatement pst = conn.prepareStatement(sql)) {

        if ("Member Name:".equals(searchType)) {
            pst.setString(1, "%" + searchInput + "%");
        } else { // Member ID
            try {
                int memberId = Integer.parseInt(searchInput);
                pst.setInt(1, memberId);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid numeric member ID.");
                return;
            }
        }

        ResultSet rs = pst.executeQuery();
        DefaultTableModel model = (DefaultTableModel) tblMemberHistory.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            Object returnDate = rs.getTimestamp("ReturnDate");
            if (returnDate == null) returnDate = "Not Returned";

            model.addRow(new Object[]{
                rs.getInt("TransactionID"),
                rs.getString("ReferenceID"),
                rs.getString("MemberName"),
                rs.getString("BookTitle"),
                rs.getString("BorrowDate"),
                rs.getString("DueDate"),
                returnDate,
                rs.getString("Status")
            });
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException |
                javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.
                invokeLater(() -> new Dashboard().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAboutUs;
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnAdminAddBook;
    private javax.swing.JButton btnAdminAddQty;
    private javax.swing.JButton btnAdminClear;
    private javax.swing.JButton btnAdminDeleteBook;
    private javax.swing.JButton btnAdminMinusQty;
    private javax.swing.JButton btnAdminUpdateBook;
    private javax.swing.JButton btnDelBook;
    private javax.swing.JButton btnDoneBorrowing;
    private javax.swing.JButton btnDoneReceive;
    public javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchBook;
    private javax.swing.JButton btnSearchClear;
    private javax.swing.JComboBox<String> cmbAdminChooseToDo;
    private javax.swing.JComboBox<String> cmbChooseSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblAvailBooks;
    private javax.swing.JLabel lblBorrow;
    private javax.swing.JLabel lblBorrowList;
    private javax.swing.JLabel lblCheckAcc;
    private javax.swing.JLabel lblHome;
    private javax.swing.JLabel lblOptions;
    private javax.swing.JLabel lblReceivedBy;
    private javax.swing.JLabel lblReturn;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JPanel pnlAdmin;
    private javax.swing.JPanel pnlAvailBooks;
    private javax.swing.JPanel pnlBase;
    private javax.swing.JPanel pnlBookForm;
    private javax.swing.JPanel pnlBorrow;
    private javax.swing.JPanel pnlBorrowingInfo;
    private javax.swing.JPanel pnlCheckAcc;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlNavigation;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JPanel pnlOptionsTab;
    private javax.swing.JPanel pnlReturn;
    private javax.swing.JPanel pnlReturningInfo;
    private javax.swing.JPanel pnlScreen;
    private javax.swing.JPanel pnlSearchBook;
    private javax.swing.JPanel pnlSearchingForm;
    public static javax.swing.JTabbedPane tabbedMenu;
    private javax.swing.JTable tblAdminBooksList;
    private javax.swing.JTable tblAvailBooks;
    private javax.swing.JTable tblBorrowList;
    private javax.swing.JTable tblBorrowed;
    private javax.swing.JTable tblDashboard;
    private javax.swing.JTable tblMemberHistory;
    private javax.swing.JTable tblMemberInfo;
    private javax.swing.JTable tblReturned;
    private javax.swing.JTable tblSearchBooksList;
    private javax.swing.JTable tblStaffInfo;
    private javax.swing.JTextField txtAdminAuthor;
    private javax.swing.JTextField txtAdminBookID;
    private javax.swing.JTextField txtAdminBookTitle;
    private javax.swing.JTextField txtAdminPublisher;
    private javax.swing.JTextField txtAdminQty;
    private javax.swing.JTextField txtAdminSearchBookTitle;
    private javax.swing.JTextField txtAdminYearPublished;
    private javax.swing.JTextField txtBookTitle;
    private javax.swing.JTextField txtBorrowDate;
    private javax.swing.JTextField txtBorrowerName;
    private javax.swing.JTextField txtDueDate;
    private javax.swing.JTextField txtIssuedBy;
    private javax.swing.JTextField txtReceivedBy;
    private javax.swing.JLabel txtReceivedBy1;
    private javax.swing.JLabel txtReceivedBy2;
    private javax.swing.JLabel txtReceivedBy3;
    private javax.swing.JLabel txtReceivedBy4;
    private javax.swing.JTextField txtReturnBook;
    private javax.swing.JTextField txtReturnDate;
    private javax.swing.JTextField txtReturnee;
    private javax.swing.JTextField txtSearchBookAuthor;
    private javax.swing.JTextField txtSearchBookTitle;
    private javax.swing.JTextField txtSearchBookYearPub;
    private javax.swing.JTextField txtSearchInput;
    // End of variables declaration//GEN-END:variables
}
